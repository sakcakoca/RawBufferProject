language: cpp

install:
  - python3 -m pip install --upgrade pip setuptools
  - pip install --upgrade cmake
  - cmake --version
  - clang --version

jobs:
  include:
    #Coverity Scan Config#
    - os: linux
      dist: bionic
      compiler: gcc
      before_install:
        - echo -n | openssl s_client -connect https://scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-
      env:
        - SPECIAL=coverity
        # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
        #   via the "travis encrypt" command using the project repo's public key
        - secure: "GYSqgp+Fx/8ZAJQm/aSkv+vnYA4iB5eE0kN54djZaAyhLsx7zacfLrP8nK9sLVMr7fjJrXDo0lxqrGipiWWnT1dI7FdjtTOohK/WZpNBooh4K4+KALd1A1CCnHk5o6F9RHlH7JgIaQLpcNMH0YT5KGaat6gUw7mUtB/MVL+BPwfldsBBU6G4v7N/JeLoiavkT3m3wqakzIX0HxxjHnDpfP5Z+/PuSN+TXhMridh2th7KxjKf0fQ7n54AXDnskXmeX2Rzt6ryJ0lX+lbdV1A3qvC+8DWloFfqTiLwx6CMXOiGfCKp41kz/QkhJ1rcf0L/PZlwPZwVmeloEQNDvG+eZJa4u4suQ2fjRsHmjblgcZsSr17HCgz8KTkT2NeEt6T77vA1oJiBBOe4Klx1cO6rSMAROxR/cWuZXj483umKLt/Y8isSJk+5iEaBlgPDTCal/1hzlIS2+AMRaRUEFsQsp2LeiXqAOiUnKPCCFCulzfrVkGIlLDSxdGzAUaZLeJt8fDKoyzyarOSWHiMAk20A4KUJ2SufgFr/oPtJzhSw1n6kanbhiKsc6YSAjelipPbpcHzf1WTTUvMfG/vbYEQLd6rDqDTyQcdqy4zXeqbhjrnPvHpCp8T4Fcfjpt6MlMEy4KDVzmJrKimvL/lyoWwfUgw1R3K7dqiUiJCmpayGuuU="
        - GCC_VER="10"
        - MATRIX_EVAL="CC=gcc-${GCC_VER} && CXX=g++-${GCC_VER}"
      addons:
        coverity_scan:
          project:
            name: "sakcakoca/RawBufferProject"
            description: "Raw Buffer Project"
          notification_email: salim.akcakoca@msn.com
          build_command_prepend: "mkdir build ; cd build"
          build_command: "cmake --build . -- -j2"
          branch_pattern: coverity_scan
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-10
            - g++-10
            - python3-pip

    #Ubuntu Bionic with gcc10 - Labeled as Ubuntu_18.04#
    - os: linux
      dist: bionic
      compiler: gcc
      env:
        - BADGE=Ubuntu_18.04
        - GCC_VER="10"
        - MATRIX_EVAL="CC=gcc-${GCC_VER} && CXX=g++-${GCC_VER}"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-10
            - g++-10
            - python3-pip
      after_script:
        - bash <(curl -s https://codecov.io/bash) -x /usr/bin/gcov-${GCC_VER}

    - os: linux
      dist: focal
      compiler: clang
      env:
        - CLANG_VER="12"
        - MATRIX_EVAL="CC=clang-${CLANG_VER} && CXX=clang++-${CLANG_VER}"
      install:
        - sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-12 10 --slave /usr/bin/clang++ clang++ /usr/bin/clang++-12
        - sudo rm -rf /usr/local/clang-7.0.0
        - clang++ --version
        - curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
        - python get-pip.py
      addons:
        apt:
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
            - sourceline: 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal main'
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
          #packages: 
            #- clang-12
            #- python3-pip
            

     #Ubuntu Bionic with clang#
#    - os: linux
#      dist: bionic
#      compiler: clang
#      env:
#        - CLANG_VER="12"
#        - MATRIX_EVAL="CC=clang-${CLANG_VER} && CXX=clang++-${CLANG_VER}"
#      addons:
#        apt:
#          sources:
#            - ubuntu-toolchain-r-test
#            - sourceline: 'deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic-12 main'
#              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
#          packages: 
#            - python3-pip
#            - clang-12

    #OsX with gcc and xcode12.4 - Labeled as OSX#
    - os: osx
      compiler: gcc
      osx_image: xcode12.4
      env:
        - BADGE=OSX
        - GCC_VER="10"
        - MATRIX_EVAL="CC=gcc-${GCC_VER} && CXX=g++-${GCC_VER}"

     #OsX with clang#
#    - os: osx
#      compiler: clang
#      osx_image: xcode12.4
#      env:
#        - MATRIX_EVAL="CXX=clang++ && CXXSTD=-std=c++20"

before_script:
  - eval "${MATRIX_EVAL}"

script:
  - mkdir build
  - cd build
  - cmake -D ENABLE_COVERAGE:BOOL=TRUE ../
  - cmake --build . -- -j2
  - ctest -j2


