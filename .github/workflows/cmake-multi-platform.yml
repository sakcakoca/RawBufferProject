# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"


    - name: Install GCC on Ubuntu
      if: matrix.os == 'ubuntu-latest' && matrix.cpp_compiler == 'g++'
      run: |
        sudo add-apt-repository universe
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
        sudo apt-get update
        sudo apt-get install gcc-14 g++-14 -y || sudo apt-get install gcc-13 g++-13 -y
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-14 60 \
                                --slave /usr/bin/g++ g++ /usr/bin/g++-14 || \
                                sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 60 \
                                --slave /usr/bin/g++ g++ /usr/bin/g++-13

    - name: Install Clang on Ubuntu
      if: matrix.os == 'ubuntu-latest' && matrix.cpp_compiler == 'clang++'
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh all
        sudo ./llvm.sh 18
        sudo ln -sf /usr/bin/clang-18 /usr/bin/clang
        sudo ln -sf /usr/bin/clang++-18 /usr/bin/clang++
        clang --version

    - name: Update Xcode Build Tools on MacOS
      if: matrix.os == 'macos-latest'
      run: |
        # Install Xcode Command Line Tools
        sudo xcode-select --install || true
        sudo xcode-select --switch /Applications/Xcode_15.4.app/Contents/Developer

        # Wait until installation is complete
        while true; do
          xcode-select -p
          if [ $? -eq 0 ]; then
            echo "Xcode Command Line Tools installed successfully."
            break
          fi
          echo "Waiting for Xcode Command Line Tools installation to complete..."
          sleep 10
        done

    - name: Install homebrew and gcc on MacOS
      if: matrix.os == 'macos-latest' && matrix.cpp_compiler == 'g++'
      run: |
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        brew install gcc@14
        sudo ln -s $(which gcc-14) /usr/local/bin/gcc
        sudo ln -s $(which gcc-14) /usr/bin/g++
        which gcc
        which g++
        gcc --version
        g++ --version

    - name: Configure CMake for Clang on Ubuntu
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      if: matrix.os == 'ubuntu-latest' && matrix.cpp_compiler == 'clang++'
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS} -stdlib=libc++"
        -S ${{ github.workspace }}

    - name: Configure CMake for G++ on Ubuntu and also for Windows
    # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
    # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      if: (matrix.os == 'ubuntu-latest' && matrix.cpp_compiler == 'g++') || (matrix.os == 'windows-latest')
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Configure CMake for macOS
      if: matrix.os == 'macos-latest'
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}


    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
